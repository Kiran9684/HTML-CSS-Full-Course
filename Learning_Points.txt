General Technique: 
1.Create an element using html.
2.Style using css one by one.

1.In CSS space(around an element) = margin.

--lesson 03:Hovers, Transitions, Shadows
	1.pseudo class in css - it basically adds extra styles in certain situations, for ex when we hover over a html element. 
	ex1- ':hover' is a pseudo class which can be used to add extra style when we hover over a element. 
	ex2- ':active' is a pseudo class which can be used to add extra style when we click on the element. 

	2.Transitions
	It's basically to change the styling effects smoothly.(for ex when we add extra styles using pseudo classes).
	css property -> 'transition' 
	it takes 2 values 1-> what to transit(property name) 2-> How smoothly you want the transition to happen/How long this transition will take(in seconds/milliseconds).

	It's always preferred to use transition property in the base Css style, so that if there are any extra styling that is used using pseudo classes then the changes transition will happen
	smoothly as per values defined in transition property. 

	3.Shawdows
	box-shadow property in CSS.
	https://www.w3schools.com/css/css3_shadows.asp

--lesson 04:CSS Box Model
	1.margin -> space outside of an element. 
	2.padding -> spacing inside our element, it's basically spacing around the text in an element. 
		Using padding is a better alternative to height and width.
	3.Border

--lesson 05:Text Styles
	1.line-height -> used to add spaces between text lines. 
	2.HTML-Entitiy -> https://www.w3schools.com/html/html_entities.asp
	3.<p> -> paragraph by default comes with top and bottom margin of 14px. 

	<Important!!>
	CSS Specificity : If we have multiple lines setting the same property there is actually a priority that follows. 
		[The selector that is more specific has higher priority].
		class name selector has more priority > than element name selector. 

--lesson 06:The HTML Structure
	<!DOCTYPE html> -> It basically tells browser to use modern version of html.
	<html> -> it marks beginning and ending of an html page.
	<head> -> it includes only the elements that are not to be seen on a web page(for ex: style,title and link tags). 
	<body> -> it includes all the elements that are to be seen on a web page.
	<title> -> this tag gives name to the webpage.

	void elements -> these doesn't have or require closing tag.

--lesson 07:Images and Text Boxes
	->When we set width, height changes automatically 
	->img element has it's own properties that are specific to image(for ex: object-fit Property)
	https://www.w3schools.com/html/html_images.asp
	https://www.w3schools.com/css/css3_object-fit.asp
	https://www.w3schools.com/CSSref/css3_pr_object-position.php


	--Vertical Align 
	https://www.w3schools.com/cssref/pr_pos_vertical-align.php


--lesson 08: CSS Display property
	-3 Types of elements in html 
	1.Block element -> these elments takes entire line.
		for ex : <p>,<div>,</hr> etc.. is a block level element.
		for visual experience you can inspect a <p> element in browser dev tools.
		note: block elements take up the entire line when within a container (<div>).
	2.Inline-block element -> these elements only takes up as much as space is needed. it does not take entire line space.
		for ex : <img>, <input> etc..
	3.Inline element -> They are basically text elements, they appear within a line of text.
		for ex : <strong> , <i> etc..

	-We can use css property display for switching over between inline and block. 


--lesson 09: div element
	-Simply you can think of it as a BOX.
	-It can contain any other elements inside it.
	-They are meant to be containers that groups all the elements for required layout.

--lesson10 : Nested layout technique
	-Basically there are 2 types of layout 
	1.Vertical layout (where things are on top of each other).
	2.Horizontal layout(where items are beside each other).
	-Combination of above 2 layouts is generally used in a website.

	Drawing Tool:
	https://docs.google.com/drawings/d/1bML0_k4cHwUfCr4cFEleEncffWjlxbTTlU4oL62KmFs/edit

	Tip: 
	Always try to break down the design into combination of above two mentioned layouts. 
	It will make easier for you to re-create the design.

--lesson11: CSS Grid
	-CSS grid is much better way to create horrizontal layouts and a grids.
	-In lesson 10 we used display in line block to create "horizontal layouts".This has some problems like alignment problems(check the video for more idea).
	-With css grid , we can create perfectly aligned horizontal layouts.
	-What is a GRID?
		A grid is a layout that has rows and columns
		for ex : consider a 2*3 grid, which means 2 rows and 3 columns.

	-To create a grid, 2 steps need to be followed. 
		1.set display property to grid. 
		2.specify how many columns you need in your grid. Use grid-template-columns css property.
	-Grid characteristics explained in Demo, check it. 
	-Fr -> It's a special value in grid, means a free space. 
	-Remember !! -> We need to always create a grid on the container. 

--Lesson12: FlexBox
	-Is another way to create a layout.
	-It is similar to css grid but it is more flexible.
	-Just like grid flex box also requires a container.
	-You can create a flex box by setting display property to flex. 
	-flex-direction property specifices how the flex items should be displayed.
	-We can create horizontal layouts while maintaining alignments in flex box.
	-flex:1 is 1fr equivalent in grid. It also takes 1free space.

	Diff b/w grid and flexbox
	--The elements take their width along with them if they move around in flex box.

	--justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
	https://www.w3schools.com/cssref/css3_pr_justify-content.php

	The align-items property specifies the default alignment for items inside the flexible container.
	https://www.w3schools.com/cssref/css3_pr_align-items.php